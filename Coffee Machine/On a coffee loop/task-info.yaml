type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static Scanner scanner = new Scanner(System.in);
        static int water = 400;
        static int milk = 540;
        static int coffee = 120;
        static int disposableCups = 9;
        static int money = 550;

        interface CoffeeActions {
            public void buyCupOfTheCoffee();
        }

        static class CoffeeType implements CoffeeActions {
            int waterPerCup = 0;
            int milkPerCup = 0;
            int coffeePerCup = 0;
            int costPerCup = 0;

            public void buyCupOfTheCoffee() {
                water -= this.waterPerCup;
                milk -= this.milkPerCup;
                coffee -= this.coffeePerCup;
                disposableCups--;
                money += this.costPerCup;
            }
        }

        static class Espresso extends CoffeeType {
            public Espresso() {
                this.waterPerCup = 250;
                this.milkPerCup = 0;
                this.coffeePerCup = 16;
                this.costPerCup = 4;
            }
        }

        static class Latte extends CoffeeType {
            public Latte() {
                this.waterPerCup = 350;
                this.milkPerCup = 75;
                this.coffeePerCup = 20;
                this.costPerCup = 7;
            }
        }

        static class Cappuccino extends CoffeeType {
            public Cappuccino() {
                this.waterPerCup = 200;
                this.milkPerCup = 100;
                this.coffeePerCup = 12;
                this.costPerCup = 6;
            }
        }

        public static void main(String[] args) {
            coffeeMachineAction();
        }

        private static void printCoffeeMachineStatus() {
            System.out.println("The coffee machine has:\n" +
                    water + " of water\n" +
                    milk + " of milk\n" +
                    coffee + " of coffee beans\n" +
                    disposableCups + " of disposable cups\n" +
                    money + " of money\n");
        }

        private static void coffeeMachineAction() {
            System.out.println("Write action (buy, fill, take, remaining, exit):");
            String action = scanner.next();
            System.out.println();
            while (true) {
                switch (action) {
                    case "buy":
                        buyCupOfCoffee();
                        break;
                    case "fill":
                        fillCoffeeMachine();
                        break;
                    case "take":
                        takeMoney();
                        break;
                    case "remaining":
                        printCoffeeMachineStatus();
                        break;
                    case "exit":
                        return;
                    default:
                        System.out.println("You can't do it!");
                }
                System.out.println();
            }
        }

        private static void initCoffeeMachine() {
            System.out.println("Write how many " + "ml" + " of water the coffee machine has:");
            water = scanner.nextInt();

            System.out.println("Write how many " + "ml" + " of milk the coffee machine has:");
            milk = scanner.nextInt();

            System.out.println("Write how many " + "g" + " of coffee the coffee machine has:");
            coffee = scanner.nextInt();

            System.out.println("Write how many " + "disposable cups" + " the coffee machine has:");
            disposableCups = scanner.nextInt();

            System.out.println("Write how many " + "dollars" + " the coffee machine has:");
            money = scanner.nextInt();
        }

        private static boolean enoughResourcesCheck(CoffeeType coffeeCup) {
            boolean enoughResources = true;

            if (water < coffeeCup.waterPerCup) {
                enoughResources = false;
                System.out.println("Sorry, not enough " + "water" + "!");
            } if (milk < coffeeCup.milkPerCup) {
                enoughResources = false;
                System.out.println("Sorry, not enough " + "milk" + "!");
            } if (coffee < coffeeCup.coffeePerCup) {
                enoughResources = false;
                System.out.println("Sorry, not enough " + "milk" + "!");
            } if (disposableCups < 1) {
                enoughResources = false;
                System.out.println("Sorry, not enough " + "disposable cups" + "!");
            } if (enoughResources) {
                System.out.println("I have enough resources, making you a coffee!");
            }
            return enoughResources;
        }

        private static void buyCupOfCoffee() {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            int coffeeType = scanner.nextInt();
            CoffeeType coffee = null;
            switch (coffeeType) {
                case 1:
                    coffee = new Espresso();
                    break;
                case 2:
                    coffee = new Latte();
                    break;
                case 3:
                    coffee = new Cappuccino();
                    break;
                default:
                    System.out.println("Your chosen type of coffee is incorrect!");
            }
            if (coffee != null && enoughResourcesCheck(coffee)) {
                coffee.buyCupOfTheCoffee();
            }
        }

        private static void fillCoffeeMachine() {
            System.out.println("Write how many " + "ml" + " of " + "water" + " do you want to add:");
            water += scanner.nextInt();

            System.out.println("Write how many " + "ml" + " of " + "milk" + " do you want to add:");
            milk += scanner.nextInt();

            System.out.println("Write how many " + "grams" + " of " + "coffee beans" + " do you want to add:");
            coffee += scanner.nextInt();

            System.out.println("Write how many " + "disposable cups" + " of " + "coffee" + " do you want to add:");
            disposableCups += scanner.nextInt();

        }

        private static void takeMoney() {
            System.out.println("I gave you $" + money);
            money -= money;
        }

        private static void takeMoney(int neededMoney) {
            if (neededMoney <= money) {
                System.out.println("I gave you $" + neededMoney);
                money -= neededMoney;
            } else {
                System.out.println("You need to earn $" + (neededMoney - money));
            }
        }

        private static void possibleCups(CoffeeType coffeeCup) {
            System.out.println("Write how many cups of coffee you will need:");
            int demandedCups = scanner.nextInt();
            int maxCups = maxPossibleCups(coffeeCup);

            if (demandedCups == maxCups) {
                System.out.println("Yes, I can make that amount of coffee");
            } else if (demandedCups < maxCups) {
                System.out.println("Yes, I can make that amount of coffee (and even " + (maxCups - demandedCups) + " more than that)");
            } else {
                System.out.println("No, I can make only " + maxCups + " cup(s) of coffee");
            }
        }

        private static int maxPossibleCups(CoffeeType coffeeCup) {
            int waterCups = water / coffeeCup.waterPerCup;
            int milkCups = milk / coffeeCup.milkPerCup;
            int coffeeCups = coffee / coffeeCup.coffeePerCup;

            return Integer.min(waterCups, Integer.min(milkCups, coffeeCups));
        }

        private static void calculateResources(CoffeeType coffeeType) {
            System.out.println("Write how many cups of coffee you will need:");
            int cupsCount = scanner.nextInt();

            int waterMl = coffeeType.waterPerCup * cupsCount;
            int milkMl = coffeeType.milkPerCup * cupsCount;
            int coffeeG = coffeeType.coffeePerCup * cupsCount;

            System.out.println("For " + cupsCount + " cups of coffee you will need:\n" +
                    waterMl + " ml of water\n" +
                    milkMl + " ml of milk\n" +
                    coffeeG + " g of coffee beans");
        }

        private static void makeCoffeeProcess() {
            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
